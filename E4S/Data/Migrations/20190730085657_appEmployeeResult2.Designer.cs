// <auto-generated />
using System;
using E4S.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace E4S.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190730085657_appEmployeeResult2")]
    partial class appEmployeeResult2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("E4S.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("EmployeeName");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("MiddleName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("OrganisationName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserRole");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("E4S.Models.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("BranchName");

                    b.Property<string>("City");

                    b.Property<string>("Comment");

                    b.Property<string>("Country");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("PhoneNo");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("E4S.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("DepartmentName");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Addition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionType");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("Others");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("Additions");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Appraisal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppraisalTitle");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("Appraisals");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.AppraisalAssignedTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AppraisalId");

                    b.Property<Guid>("AppraisalTemplateId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AppraisalId");

                    b.HasIndex("AppraisalTemplateId");

                    b.HasIndex("EmployeeDetailId");

                    b.ToTable("AppraisalAssignedTemplates");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.AppraisalCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.Property<bool>("PreFilled");

                    b.HasKey("Id");

                    b.ToTable("AppraisalCategories");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.AppraisalEmployeeResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AppraisalId");

                    b.Property<float>("AppraisalScore");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateSubmited");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<string>("EmployeePerformanceReview");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AppraisalId");

                    b.HasIndex("EmployeeDetailId");

                    b.ToTable("AppraisalEmployeeResults");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.AppraisalKPI", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AppraisalCategoryId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("KPI");

                    b.Property<Guid>("OrganisationId");

                    b.Property<float>("Weight");

                    b.HasKey("Id");

                    b.ToTable("AppraisalKPIs");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.AppraisalTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("Template");

                    b.HasKey("Id");

                    b.ToTable("AppraisalTemplates");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.AppraisalTemplateCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AppraisalCategoryId");

                    b.Property<Guid>("AppraisalTemplateId");

                    b.Property<string>("AssignTo");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.Property<float>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("AppraisalCategoryId");

                    b.ToTable("AppraisalTemplateCategories");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.AssignedSubordinate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("ReportMethod");

                    b.Property<Guid>("SubordinateId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDetailId");

                    b.ToTable("AssignedSubordinates");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.AssignedSupervisor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("ReportMethod");

                    b.Property<Guid>("SupervisorId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDetailId");

                    b.ToTable("AssignedSupervisors");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.ContactDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressOne");

                    b.Property<string>("AddressTwo");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<string>("HomeTelephone");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Mobile");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("OtherEmail");

                    b.Property<string>("State");

                    b.Property<string>("WorkEmail");

                    b.Property<string>("WorkTelephone");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDetailId");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Deduction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("DeductionType");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("Others");

                    b.Property<bool>("Status");

                    b.HasKey("Id");

                    b.ToTable("Deductions");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Dependant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("Relationship");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDetailId");

                    b.ToTable("Dependants");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.EmergencyContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<string>("HomeTelephone");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Mobile");

                    b.Property<string>("Name");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("Relationship");

                    b.Property<string>("WorkTelephone");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDetailId");

                    b.ToTable("EmergencyContacts");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.EmployeeDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Email");

                    b.Property<string>("EmployeeId");

                    b.Property<string>("EmployeeStatus");

                    b.Property<string>("FirstName");

                    b.Property<string>("Gender");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("MiddleName");

                    b.Property<string>("Nationality");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("OtherId");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.ToTable("EmployeeDetails");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.EmploymentStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<string>("EmploymentStatusName");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.HasKey("Id");

                    b.ToTable("EmploymentStatuses");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.InstitutionQualification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseOfStudy");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Degree");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<string>("Grade");

                    b.Property<string>("ImageURL");

                    b.Property<string>("Institution");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("YearCompleted");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDetailId");

                    b.ToTable("InstitutionQualifications");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BranchId");

                    b.Property<string>("ContractDetail");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<Guid>("DepartmentId");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<Guid>("EmploymentStatusId");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JobCategoryId");

                    b.Property<string>("JobSpecification");

                    b.Property<Guid>("JobTitleId");

                    b.Property<DateTime>("JoinedDate");

                    b.Property<Guid>("OrganisationId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeDetailId");

                    b.HasIndex("JobTitleId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.JobCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("JobCategoryName");

                    b.Property<Guid>("OrganisationId");

                    b.HasKey("Id");

                    b.ToTable("JobCategories");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.JobTitle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("JobTitleName");

                    b.Property<string>("Note");

                    b.Property<Guid>("OrganisationId");

                    b.HasKey("Id");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.KPIEmployeeResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AppraisalEmployeeResultId");

                    b.Property<Guid>("AppraisalId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("KPIId");

                    b.Property<string>("KPISelection");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("KPIEmployeeResults");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Leave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ApproveDate");

                    b.Property<int>("CalculatedDays");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("LeaveConfigId");

                    b.Property<string>("LeaveTitle");

                    b.Property<Guid>("OrganisationId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDetailId");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.LeaveConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LeaveTitle");

                    b.Property<int>("MaxApplication");

                    b.Property<int>("MaxDuration");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("LeaveConfigurations");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.OrganisationAsset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("DeviceName");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<string>("EmployeeName");

                    b.Property<bool>("IsAssigned");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Model");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("SerialNumber");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.ToTable("OrganisationAssets");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.PayGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Currency");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<bool>("IsDeleted");

                    b.Property<float>("MaximumSalary");

                    b.Property<float>("MinimumSalary");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("PayGradeName");

                    b.HasKey("Id");

                    b.ToTable("PayGrades");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Payroll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("AbsentDeductions");

                    b.Property<string>("AccountName");

                    b.Property<string>("AccountNo");

                    b.Property<float>("Addition");

                    b.Property<float>("AnnualActualTaxPayable");

                    b.Property<float>("AnnualGrossSalary");

                    b.Property<float>("AnnualOTArrears");

                    b.Property<float>("AnnualPayableTax");

                    b.Property<float>("Arrears");

                    b.Property<string>("BankName");

                    b.Property<float>("Basic");

                    b.Property<float>("ComputedAnnualTax");

                    b.Property<float>("ConsolidatedReliefsAllowance");

                    b.Property<float>("CooperativeDeduction");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<Guid>("EmployeeId");

                    b.Property<string>("EmployeeName");

                    b.Property<Guid>("GenerationId");

                    b.Property<float>("Gratuities");

                    b.Property<float>("GrossAnnualEmolument");

                    b.Property<float>("GrossMonthlyEmolument");

                    b.Property<float>("Housing");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JobId");

                    b.Property<float>("LifeAssurance");

                    b.Property<float>("Meal");

                    b.Property<float>("MinimumTax");

                    b.Property<string>("Month");

                    b.Property<float>("MonthlyActualTaxPayable");

                    b.Property<float>("MonthlyBasic");

                    b.Property<float>("MonthlyMinimumTax");

                    b.Property<float>("NHIS");

                    b.Property<Guid>("OrganisationId");

                    b.Property<float>("OtherDeductions");

                    b.Property<float>("Overtime");

                    b.Property<float>("PayableToStaff");

                    b.Property<string>("PayrollMonth");

                    b.Property<float>("PensionDeductionMonthly");

                    b.Property<float>("PensionFund");

                    b.Property<Guid>("SalaryId");

                    b.Property<float>("StaffLoan");

                    b.Property<float>("TaxableIncome");

                    b.Property<float>("TotalAnnualRellief");

                    b.Property<float>("TotalDeduction");

                    b.Property<float>("Transport");

                    b.Property<string>("Year");

                    b.HasKey("Id");

                    b.ToTable("Payrolls");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Salary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountName");

                    b.Property<string>("AccountNo");

                    b.Property<float>("Amount");

                    b.Property<string>("BankName");

                    b.Property<string>("Comment");

                    b.Property<string>("Currency");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("PayFrequency");

                    b.Property<string>("SalaryComponent");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDetailId");

                    b.ToTable("Salaries");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.SalaryAddition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("AdditionId");

                    b.Property<float>("Amount");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.HasKey("Id");

                    b.HasIndex("AdditionId");

                    b.HasIndex("EmployeeDetailId");

                    b.ToTable("SalaryAdditions");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.SalaryDeduction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("Amount");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<Guid>("DeductionId");

                    b.Property<string>("Description");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.HasKey("Id");

                    b.HasIndex("DeductionId");

                    b.HasIndex("EmployeeDetailId");

                    b.ToTable("SalaryDeductions");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("SkillName");

                    b.Property<string>("YearsOfExperience");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDetailId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationLink");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Description");

                    b.Property<string>("HiringManager");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<Guid>("JobTitleId");

                    b.Property<int>("NumberOfPosition");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("Status");

                    b.Property<DateTime>("VacancyCloseDate");

                    b.Property<string>("VacancyName");

                    b.HasKey("Id");

                    b.HasIndex("JobTitleId");

                    b.ToTable("Vacancies");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.WorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<Guid>("EmployeeDetailId");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("JobTitle");

                    b.Property<string>("Organisation");

                    b.Property<Guid>("OrganisationId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeDetailId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("E4S.Models.Organisation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateModified");

                    b.Property<DateTime>("DateUpdated");

                    b.Property<string>("Email");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("NoOfEmployees");

                    b.Property<Guid>("OrganisationId");

                    b.Property<string>("OrganisationName");

                    b.Property<string>("OrganisationPrefix");

                    b.Property<string>("PhoneNumber");

                    b.Property<Guid>("RegistrarId");

                    b.Property<string>("RegistrationNo");

                    b.Property<string>("State");

                    b.Property<string>("TaxId");

                    b.Property<int>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("E4S.Models.HumanResource.AppraisalAssignedTemplate", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.Appraisal", "Appraisal")
                        .WithMany()
                        .HasForeignKey("AppraisalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("E4S.Models.HumanResource.AppraisalTemplate", "AppraisalTemplate")
                        .WithMany()
                        .HasForeignKey("AppraisalTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.AppraisalEmployeeResult", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.Appraisal", "Appraisal")
                        .WithMany()
                        .HasForeignKey("AppraisalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.AppraisalTemplateCategory", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.AppraisalCategory", "AppraisalCategory")
                        .WithMany()
                        .HasForeignKey("AppraisalCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.AssignedSubordinate", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.AssignedSupervisor", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.ContactDetail", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Dependant", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.EmergencyContact", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.InstitutionQualification", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Job", b =>
                {
                    b.HasOne("E4S.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("E4S.Models.HumanResource.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Leave", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Salary", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.SalaryAddition", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.Addition", "Addition")
                        .WithMany()
                        .HasForeignKey("AdditionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.SalaryDeduction", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.Deduction", "Deduction")
                        .WithMany()
                        .HasForeignKey("DeductionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Skill", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.Vacancy", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("E4S.Models.HumanResource.WorkExperience", b =>
                {
                    b.HasOne("E4S.Models.HumanResource.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E4S.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E4S.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("E4S.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E4S.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
